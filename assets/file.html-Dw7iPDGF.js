import{_ as s,c as e,b as a,o as t}from"./app-Ciqs_Xc9.js";const l={};function n(h,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h2 id="index-文件" tabindex="-1"><a class="header-anchor" href="#index-文件"><span>Index 文件</span></a></h2><p><code>public/index.html</code> 文件是一个会被处理的模板。在构建过程中，资源链接会被自动注入。另外，Vue CLI 也会自动注入打包好的 JavaScript 和 CSS 文件的资源链接。它会最终成为 Vue 应用的页面。</p><h2 id="处理静态资源" tabindex="-1"><a class="header-anchor" href="#处理静态资源"><span>处理静态资源</span></a></h2><p>静态资源可以通过两种方式进行处理:</p><ul><li><p>在 JavaScript 被导入或在 template/CSS 中通过相对路径被引用。这类引用会被 webpack 处理。</p></li><li><p>放置在 <code>public</code> 目录下或通过绝对路径被引用。这类资源将会直接被拷贝，而不会经过 webpack 的处理。</p></li></ul><h3 id="从相对路径导入" tabindex="-1"><a class="header-anchor" href="#从相对路径导入"><span>从相对路径导入</span></a></h3><p>当您在 JavaScript、CSS 或 <code>*.vue</code> 文件中使用相对路径 (必须以 <code>.</code> 开头) 引用一个静态资源时，该资源将会被包含进入 webpack 的依赖图中。在其编译过程中，所有诸如 <code>&lt;img src=&quot;...&quot;&gt;</code>、<code>background: url(...)</code> 和 CSS <code>@import</code> 的资源 URL <strong>都会被解析为一个模块依赖</strong>。</p><p>例如，<code>url(./image.png)</code> 会被翻译为 <code>require(&#39;./image.png&#39;)</code>，而:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./image.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将会被编译到:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;img&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">attrs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./image.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) } });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="url-转换规则" tabindex="-1"><a class="header-anchor" href="#url-转换规则"><span>URL 转换规则</span></a></h3><ul><li><p>如果 URL 是一个绝对路径 (例如 <code>/images/foo.png</code>)，它将会被保留不变。</p></li><li><p>如果 URL 以 <code>.</code> 开头，它会作为一个相对模块请求被解释且基于您的文件系统中的目录结构进行解析。</p></li><li><p>如果 URL 以 <code>~</code> 开头，其后的任何内容都会作为一个模块请求被解析。这意味着您甚至可以引用 Node.js 模块中的资源:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;~some-npm-package/foo.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>如果 URL 以 <code>@</code> 开头，它也会作为一个模块请求被解析。它的用处在于 Vue CLI 默认会设置一个指向 <code>&lt;projectRoot&gt;/src</code> 的别名 <code>@</code>。<strong>(仅作用于模版中)</strong></p></li></ul><h3 id="public-文件夹" tabindex="-1"><a class="header-anchor" href="#public-文件夹"><span><code>public</code> 文件夹</span></a></h3><p>任何放置在 <code>public</code> 文件夹的静态资源都会被简单的复制，而不经过 webpack。您需要通过绝对路径来引用它们。</p><p>注意我们推荐将资源作为您的模块依赖图的一部分导入，这样它们会通过 webpack 的处理并获得如下好处:</p><ul><li>脚本和样式表会被压缩且打包在一起，从而避免额外的网络请求。</li><li>文件丢失会直接在编译时报错，而不是到了用户端才产生 404 错误。</li><li>最终生成的文件名包含了内容哈希，因此您不必担心浏览器会缓存它们的老版本。</li></ul><p><code>public</code> 目录提供的是一个<strong>应急手段</strong>，当您通过绝对路径引用它时，留意应用将会部署到哪里。如果您的应用没有部署在域名的根部，那么您需要为您的 URL 配置 publicPath 前缀:</p><ul><li><p>在 <code>public/index.html</code> 或其它通过 <code>html-webpack-plugin</code> 用作模板的 HTML 文件中，您需要通过 <code>&lt;%= BASE_URL %&gt;</code> 设置链接前缀:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;icon&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">%= BASE_URL %&gt;favicon.ico&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>在模板中，您首先需要向您的组件传入基础 URL:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    publicPath</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">BASE_URL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\`\${publicPath}my-image.png\`&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="何时使用-public-文件夹" tabindex="-1"><a class="header-anchor" href="#何时使用-public-文件夹"><span>何时使用 <code>public</code> 文件夹</span></a></h3><ul><li>您需要在构建输出中指定一个文件的名字。</li><li>您有上千个图片，需要动态引用它们的路径。</li><li>有些库可能和 webpack 不兼容，这时您除了将其用一个独立的 <code>&lt;script&gt;</code> 标签引入没有别的选择。</li></ul>`,21)]))}const d=s(l,[["render",n],["__file","file.html.vue"]]),r=JSON.parse('{"path":"/code/vue/cli/file.html","title":"文件处理原则","lang":"zh-CN","frontmatter":{"title":"文件处理原则","icon":"file","category":"Vue","tag":["Vue Cli"],"description":"Index 文件 public/index.html 文件是一个会被处理的模板。在构建过程中，资源链接会被自动注入。另外，Vue CLI 也会自动注入打包好的 JavaScript 和 CSS 文件的资源链接。它会最终成为 Vue 应用的页面。 处理静态资源 静态资源可以通过两种方式进行处理: 在 JavaScript 被导入或在 template/C...","head":[["meta",{"property":"og:url","content":"https://www.songjun520.cn/code/vue/cli/file.html"}],["meta",{"property":"og:site_name","content":"Mr.Song"}],["meta",{"property":"og:title","content":"文件处理原则"}],["meta",{"property":"og:description","content":"Index 文件 public/index.html 文件是一个会被处理的模板。在构建过程中，资源链接会被自动注入。另外，Vue CLI 也会自动注入打包好的 JavaScript 和 CSS 文件的资源链接。它会最终成为 Vue 应用的页面。 处理静态资源 静态资源可以通过两种方式进行处理: 在 JavaScript 被导入或在 template/C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T09:47:57.000Z"}],["meta",{"property":"article:tag","content":"Vue Cli"}],["meta",{"property":"article:modified_time","content":"2024-11-05T09:47:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件处理原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-05T09:47:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Song\\",\\"url\\":\\"https://www.songjun520.cn/\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://www.songjun520.cn/atom.xml","title":"Mr.Song Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://www.songjun520.cn/feed.json","title":"Mr.Song JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.songjun520.cn/rss.xml","title":"Mr.Song RSS Feed"}]]},"headers":[{"level":2,"title":"Index 文件","slug":"index-文件","link":"#index-文件","children":[]},{"level":2,"title":"处理静态资源","slug":"处理静态资源","link":"#处理静态资源","children":[{"level":3,"title":"从相对路径导入","slug":"从相对路径导入","link":"#从相对路径导入","children":[]},{"level":3,"title":"URL 转换规则","slug":"url-转换规则","link":"#url-转换规则","children":[]},{"level":3,"title":"public 文件夹","slug":"public-文件夹","link":"#public-文件夹","children":[]},{"level":3,"title":"何时使用 public 文件夹","slug":"何时使用-public-文件夹","link":"#何时使用-public-文件夹","children":[]}]}],"git":{"createdTime":1659606751000,"updatedTime":1730800077000,"contributors":[{"name":"MrSong","email":"289097246@qq.com","commits":1},{"name":"宋军","email":"289097246@qq.com","commits":1}]},"readingTime":{"minutes":2.84,"words":852},"filePathRelative":"code/vue/cli/file.md","localizedDate":"2022年8月4日","excerpt":"<h2>Index 文件</h2>\\n<p><code>public/index.html</code> 文件是一个会被处理的模板。在构建过程中，资源链接会被自动注入。另外，Vue CLI 也会自动注入打包好的 JavaScript 和 CSS 文件的资源链接。它会最终成为 Vue 应用的页面。</p>\\n<h2>处理静态资源</h2>\\n<p>静态资源可以通过两种方式进行处理:</p>\\n<ul>\\n<li>\\n<p>在 JavaScript 被导入或在 template/CSS 中通过相对路径被引用。这类引用会被 webpack 处理。</p>\\n</li>\\n<li>\\n<p>放置在 <code>public</code> 目录下或通过绝对路径被引用。这类资源将会直接被拷贝，而不会经过 webpack 的处理。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};

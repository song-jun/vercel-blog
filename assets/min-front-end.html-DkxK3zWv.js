import{_ as n,c as l,d as e,o as a}from"./app-B-ayoO34.js";const r={};function i(o,t){return a(),l("div",null,t[0]||(t[0]=[e("h2",{id:"微前端概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#微前端概念"},[e("span",null,"微前端概念")])],-1),e("ul",null,[e("li",null,"微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略"),e("li",null,"核心价值: 1.技术栈无关 主框架不限制接入应用的技术栈，微应用具备完全自主权 2.独立开发、独立部署 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 3.增量升级 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 4.独立运行 每个微应用之间状态隔离，运行时状态不共享")],-1),e("h2",{id:"什么是组件和模块",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是组件和模块"},[e("span",null,"什么是组件和模块")])],-1),e("ul",null,[e("li",null,"组件：把重复的代码提取出来合并成为一个个组件，组件最重要的就是重用（复用），位于框架最底层，其他功能都依赖于组件，可供不同功能使用，独立性强。"),e("li",null,"模块：分属同一功能/业务的代码进行隔离（分装）成独立的模块，可以独立运行，以页面、功能或其他不同粒度划分程度不同的模块，位于业务框架层，模块间通过接口调用，目的是降低模块间的耦合，由之前的主应用与模块耦合，变为主应用与接口耦合，接口与模块耦合。模块就像有多个USB插口的充电宝，可以和多部手机充电，接口可以随意插拔。复用性很强，可以独立管理。")],-1)]))}const d=n(r,[["render",i]]),m=JSON.parse('{"path":"/interview/min-front-end.html","title":"微前端面试题","lang":"zh-CN","frontmatter":{"title":"微前端面试题","date":"2020-08-07T14:24:00.000Z","category":"面试题","tag":"微前端面试题","feed":false,"seo":false,"head":[["link",{"rel":"alternate","type":"application/atom+xml","href":"https://www.songjun520.cn/atom.xml","title":"Mr.Song Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://www.songjun520.cn/feed.json","title":"Mr.Song JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.songjun520.cn/rss.xml","title":"Mr.Song RSS Feed"}]]},"git":{"createdTime":1662601007000,"updatedTime":1662698321000,"contributors":[{"name":"MrSong","username":"MrSong","email":"289097246@qq.com","commits":3}]},"readingTime":{"minutes":1.53,"words":458},"filePathRelative":"interview/min-front-end.md","localizedDate":"2020年8月7日"}');export{d as comp,m as data};
